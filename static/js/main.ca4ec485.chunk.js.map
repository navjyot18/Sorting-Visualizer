{"version":3,"sources":["components/Home.jsx","components/sortingAlgorithms/sortingAlgorithms.js","components/sorting/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","className","motion","h1","animate","fontSize","color","y","MergesortingAlgorithms","array","animations","length","tempArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","i","k","j","push","doMerge","useStyles","makeStyles","bar","backgroundColor","height","marginTop","title","padding","grid","alignItems","justifyContent","SortingVisualizer","min","max","classes","NUMBER_OF_ARRAY_BARS","random","React","useState","ANIMATION_SPEED_MS","setANIMATION_SPEED_MS","disabled","SECONDARY_COLOR","SECONDARY_COLOR_2","arr","setArr","useEffect","updateArray","AppBar","style","pointerEvents","position","Typography","variant","Toolbar","Button","onClick","size","ButtonGroup","aria-label","temp","BubbleSortingAlgorithms","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color1","color2","setTimeout","newHeight1","newHeight2","BubbleSort","console","log","key","getInsertionSortAnimations","newHeight","insertionSort","mergeSort","margin","id","gutterBottom","Slider","width","value","onChange","event","newValue","aria-labelledby","map","idx","App","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mRAceA,MATf,WAEC,OACC,qBAAKC,UAAU,OAAf,SACC,cAACC,EAAA,EAAOC,GAAR,CAAWC,QAAS,CAACC,SAAS,QAASC,MAAM,UAAWC,EAAE,IAA1D,mC,QC4DI,SAASC,EAAuBC,GAGnC,IAAMC,EAAa,GACnB,GAAGD,EAAME,QAAU,EAAG,OAAOF,EAE7B,IAAMG,EAAYH,EAAMI,QAExB,OADAC,EAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAWF,GAChDA,EAEX,SAASI,EAAgBC,EAAWC,EAAUC,EAAQL,EAAWF,GAG7D,GAAGM,IAAaC,EAAhB,CAEA,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAQ,GACjDH,EAAgBF,EAAWI,EAAUE,EAAWH,EAAWL,GAC3DI,EAAgBF,EAAWM,EAAY,EAAGD,EAAQF,EAAWL,GAIjE,SAAiBK,EAAWC,EAAUE,EAAWD,EAAQL,EAAWF,GAEhE,IAAIW,EAAIL,EAAUM,EAAIN,EAAUO,EAAIL,EAAY,EAEhD,KAAMG,GAAKH,GAAaK,GAAKN,GAEzBP,EAAWc,KAAK,CAACH,EAAGE,IACpBb,EAAWc,KAAK,CAACH,EAAGE,IAEjBX,EAAUS,IAAMT,EAAUW,IAEzBb,EAAWc,KAAK,CAACF,EAAGV,EAAUS,KAC9BN,EAAUO,KAAOV,EAAUS,OAI3BX,EAAWc,KAAK,CAACF,EAAGV,EAAUW,KAC9BR,EAAUO,KAAOV,EAAUW,MAInC,KAAMF,GAAKH,GAEPR,EAAWc,KAAK,CAACH,EAAGA,IACpBX,EAAWc,KAAK,CAACH,EAAGA,IAEpBX,EAAWc,KAAK,CAACF,EAAGV,EAAUS,KAC9BN,EAAUO,KAAOV,EAAUS,KAG/B,KAAME,GAAKN,GAEPP,EAAWc,KAAK,CAACD,EAAGA,IACpBb,EAAWc,KAAK,CAACD,EAAGA,IACpBb,EAAWc,KAAK,CAACF,EAAGV,EAAUW,KAC9BR,EAAUO,KAAOV,EAAUW,KAtC/BE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAWF,I,oEC1EzDgB,EAAYC,YAAW,CAC5BC,IAAK,CACJC,gBAAiB,UACjBC,OAAQ,QACRC,UAAW,QAGZC,MAAO,CACND,UAAU,OACVE,QAAS,QAGVC,KAAM,CACLH,UAAU,QACVI,WAAY,SACZC,eAAe,kBAqQFC,MAhQf,WAGC,IAUuBC,EAAKC,EAVtBC,EAAUd,IACVe,GASiBH,EAToB,EASfC,EATiB,IAWnCpB,KAAKC,MAAMD,KAAKuB,UAAYH,EAAMD,EAAM,IAAMA,GAdxD,EAIoDK,IAAMC,SAAS,IAJnE,mBAIOC,EAJP,KAI2BC,EAJ3B,OAMgCF,oBAAS,GANzC,mBAMOG,EANP,UAkBA,IAGMC,EAAkB,QAClBC,EAAoB,OAtB1B,EAuBsBL,mBAAS,IAvB/B,mBAuBOM,EAvBP,KAuBYC,EAvBZ,KAwBAC,qBAAU,WAETC,MACC,IAEF,IAAMA,EAAc,WAGhB,IADH,IAAMH,EAAM,GACA7B,EAAI,EAAGA,EAAIoB,EAAsBpB,IAExC6B,EAAI1B,KAAKL,KAAKC,MAAM,IAAAD,KAAKuB,SAA2B,IAEzDS,EAAOD,IAkLR,OACE,gCACI,eAACI,EAAA,EAAD,CACEC,MACC,CACCC,cAAeT,EAAW,OAAS,WAEtC9C,UAAWuC,EAAQZ,IAAK6B,SAAS,SALlC,UAMC,cAACC,EAAA,EAAD,CAAYzD,UAAWuC,EAAQR,MAAM2B,QAAQ,KAA7C,iCACC,eAACC,EAAA,EAAD,CAAS3D,UAAWuC,EAAQN,KAA5B,UACC,cAAC2B,EAAA,EAAD,CAAQC,QAAS,kBAAIT,KAAeU,KAAK,QAAQJ,QAAQ,YAAzD,gCACN,eAACK,EAAA,EAAD,CAAcD,KAAK,QAAQE,aAAW,8BAAtC,UACE,cAACJ,EAAA,EAAD,CAAQC,QAAS,kBArEH,WAGZ,IADA,IAAMpD,EDvKP,SAAiCD,GAGpC,IADA,IAAMC,EAAa,GACXW,EAAI,EAAGA,EAAIZ,EAAME,OAAQU,IAE7B,IAAI,IAAIE,EAAI,EAAGA,EAAId,EAAME,OAASU,EAAI,EAAGE,IAIrC,GAFAb,EAAWc,KAAK,CAACD,EAAGA,EAAE,IACtBb,EAAWc,KAAK,CAACD,EAAGA,EAAE,IACnBd,EAAMc,GAAKd,EAAMc,EAAE,GACtB,CAEIb,EAAWc,KAAK,CAACD,EAAGA,EAAE,EAAGd,EAAMc,GAAId,EAAMc,EAAE,KAC3C,IAAI2C,EAAOzD,EAAMc,EAAE,GACnBd,EAAMc,EAAE,GAAKd,EAAMc,GACnBd,EAAMc,GAAK2C,OAIXxD,EAAWc,KAAK,CAACD,EAAGd,EAAMc,KAItC,OAAOb,ECgJgByD,CAAwBjB,GADlD,WAEe7B,GAGJ,IAAM+C,EAAYC,SAASC,uBAAuB,aAClD,GAAqB,OAAlB5D,EAAWW,GAAa,iBAI3B,GADsBA,EAAE,IAAM,EAE9B,mBAEmCX,EAAWW,GAF9C,GAEWkD,EAFX,KAEsBC,EAFtB,KAGUC,EAAcL,EAAUG,GAAWhB,MACnCmB,EAAcN,EAAUI,GAAWjB,MAEnCoB,EAAStD,EAAE,IAAM,EAAI2B,EAAkB,YACvC4B,EAASvD,EAAE,IAAM,EAAI4B,EAAoB,YAC/C4B,YAAW,WAEPJ,EAAY5C,gBAAkB8C,EAC9BD,EAAY7C,gBAAkB+C,IAC/BvD,EAAIwB,QAKqB,IAAzBnC,EAAWW,GAAGV,QAE5BkE,YAAW,WAAO,IAAD,cAEuCnE,EAAWW,GAFlD,GAETkD,EAFS,KAEEC,EAFF,KAEaM,EAFb,KAEyBC,EAFzB,KAGVN,EAAcL,EAAUG,GAAWhB,MACnCmB,EAAcN,EAAUI,GAAWjB,MACzCkB,EAAY3C,OAAZ,UAAwBiD,EAAxB,MACAL,EAAY5C,OAAZ,UAAwBgD,EAAxB,QAECzD,EAAIwB,IApCKxB,EAAI,EAAGA,EAAIX,EAAWC,OAAQU,IACtC,EADQA,GAkEW2D,IAAc1E,MAAM,YAAYqD,QAAQ,OAA7D,yBACA,cAACE,EAAA,EAAD,CAAQC,QAAS,aAAqBxD,MAAM,YAAYqD,QAAQ,OAAhE,4BACA,cAACE,EAAA,EAAD,CAAQC,QAAS,kBA7JG,WAErBmB,QAAQC,IAAIhC,GACT,IAAMxC,ED5GP,SAAoCD,GAIvC,IAFA,IAAMC,EAAa,GAEVW,EAAI,EAAGA,EAAIZ,EAAME,OAAOU,IACjC,CAGQ,IAFA,IAAIE,EAAIF,EAAE,EACN8D,EAAM1E,EAAMY,GACTE,GAAK,GAAK4D,EAAM1E,EAAMc,IAGzBb,EAAWc,KAAK,CAACD,EAAE,EAAEA,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEA,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEd,EAAMc,KAC3Bd,EAAMc,EAAE,GAAKd,EAAMc,GACnBA,GAAK,EAETb,EAAWc,KAAK,CAACH,EAAEE,EAAE,IACrBb,EAAWc,KAAK,CAACH,EAAEE,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAE4D,IACrB1E,EAAMc,EAAE,GAAK4D,EAGrB,OAAOzE,ECqFgB0E,CAA2BlC,GAC9C+B,QAAQC,IAAIxE,GACZ,IALuB,eAKdW,GACL,IAAM+C,EAAYC,SAASC,uBAAuB,aAGlD,GAFsBjD,EAAI,IAAM,EAEb,CAAC,IAAD,cACgBX,EAAWW,GAD3B,GACRkD,EADQ,KACGC,EADH,KAETC,EAAcL,EAAUG,GAAWhB,MACnCmB,EAAcN,EAAUI,GAAWjB,MACnCoB,EAAStD,EAAE,IAAM,EAAI2B,EAAkB,YACvC4B,EAASvD,EAAE,IAAM,EAAI4B,EAAoB,YAE/C4B,YAAW,WAEPJ,EAAY5C,gBAAkB8C,EAC9BD,EAAY7C,gBAAkB+C,IAC/BvD,EAAIwB,QAKPgC,YAAW,WACV,IAAD,cAEmCnE,EAAWW,GAF9C,GAEWkD,EAFX,KAEsBc,EAFtB,KAGwBjB,EAAUG,GAAWhB,MAC7BzB,OAAZ,UAAwBuD,EAAxB,QACDhE,EAAIwB,IA1BNxB,EAAI,EAAGA,EAAIX,EAAWC,OAAQU,IAAM,EAApCA,GAwJUiE,IAAiBhF,MAAM,YAAYqD,QAAQ,OAAhE,4BACA,cAACE,EAAA,EAAD,CAAQC,QAAS,kBA7LJ,WAIX,IAFA,IAAMpD,EAAaF,EAAuB0C,GADjD,WAGe7B,GAEJ,IAAM+C,EAAYC,SAASC,uBAAuB,aAGlD,GAFsBjD,EAAE,IAAM,EAEZ,CAAC,IAAD,cACiBX,EAAWW,GAD5B,GACPkD,EADO,KACIC,EADJ,KAGRC,EAAcL,EAAUG,GAAWhB,MACnCmB,EAAcN,EAAUI,GAAWjB,MAEnCjD,EAAQe,EAAE,IAAM,EAAI2B,EAAkB,YAC5C6B,YAAW,WACPJ,EAAY5C,gBAAkBvB,EAC9BoE,EAAY7C,gBAAkBvB,IAC/Be,EAAIwB,QAGPgC,YAAW,WAAO,IAAD,cACkBnE,EAAWW,GAD7B,GACNkD,EADM,KACKc,EADL,KAEOjB,EAAUG,GAAWhB,MAC7BzB,OAAZ,UAAwBuD,EAAxB,QACDhE,EAAIwB,IAtBPxB,EAAI,EAAGA,EAAIX,EAAWC,OAAQU,IAAM,EAApCA,GAyLWkE,IAAajF,MAAM,YAAYqD,QAAQ,OAA5D,wBACG,cAACD,EAAA,EAAD,CAAYH,MAAO,CAACiC,OAAO,QAASC,GAAG,oBAAoBC,cAAY,EAAvE,6BAGH,cAACC,EAAA,EAAD,CAAQrF,MAAM,YAAYiD,MAAO,CAACiC,OAAO,OAAOI,MAAM,SAASC,MAAOhD,EAAoBiD,SAlOxE,SAACC,EAAOC,GAE3BlD,EAAsBkD,GACtBf,QAAQC,IAAIrC,IA+NuGoD,kBAAgB,+BAItI,qBAAKhG,UAAU,kBAAf,SACQiD,EAAIgD,KAAI,SAACL,EAAOM,GAAR,OACP,qBACElG,UAAU,YAEVsD,MACC,CACE1B,gBAlOO,YAmOPC,OAAO,GAAD,OAAK+D,EAAL,MACND,MAAM,GAAD,OAAK,IAAK1C,EAAIvC,OAAd,QALHwF,YCxOHC,MAjCf,WACE,OACI,8BACA,cAAC,IAAD,UACE,sBAAKnG,UAAU,SAAf,UACI,qBAAIA,UAAU,KAAd,UACE,6BACE,cAAC,IAAD,CAAMsD,MAAO,CAACjD,MAAO,SAAUD,SAAS,QAASgG,GAAG,QAApD,oBAEF,6BACE,cAAC,IAAD,CAAM9C,MAAO,CAACjD,MAAO,SAAUD,SAAS,QAASgG,GAAG,qBAApD,iCAEF,6BACE,cAAC,IAAD,CAAM9C,MAAO,CAACjD,MAAO,SAAUD,SAAS,QAASgG,GAAG,OAApD,sBAGN,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,qBAAZ,SACE,cAAC,EAAD,iBCpBCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAAS8C,eAAe,SAM1BZ,M","file":"static/js/main.ca4ec485.chunk.js","sourcesContent":["import React from 'react';\r\nimport {motion} from 'framer-motion';\r\n\r\nimport './styles.css';\r\n\r\nfunction Home() {\r\n\t// body...\r\n\treturn(\r\n\t\t<div className=\"home\">\r\n\t\t\t<motion.h1 animate={{fontSize:'100px', color:'#c70046', y:40}}>SORTING VISUALIZER</motion.h1>\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Home;\r\n","export function getInsertionSortAnimations(array){\r\n       \r\n    const animations = []\r\n    //start from 1st index since one element is already sorted\r\n    for (let i = 1; i < array.length;i++)\r\n    {\r\n            let j = i-1\r\n            let key = array[i]    \r\n            while (j >= 0 && key < array[j])\r\n            {\r\n                \r\n                animations.push([j+1,j])//pushing to show diff colored bars of coparison\r\n                animations.push([j+1,j])//pushing to revert bac their color\r\n                animations.push([j+1,array[j]])\r\n                array[j+1] = array[j]\r\n                j -= 1\r\n            }\r\n            animations.push([i,j+1])\r\n            animations.push([i,j+1])\r\n            animations.push([j+1,key])\r\n            array[j+1] = key\r\n    }\r\n  \r\n    return animations;\r\n}\r\n\r\nexport function BubbleSortingAlgorithms(array)\r\n{\r\n    const animations = []\r\n    for(let i = 0; i < array.length; i++) \r\n    {\r\n        for(let j = 0; j < array.length - i - 1; j++) \r\n        {\r\n            animations.push([j, j+1])//pushing to change their color\r\n            animations.push([j, j+1])//pushing t revert back teh colorto blue\r\n            if(array[j] > array[j+1]) \r\n            {\r\n                \r\n                animations.push([j, j+1, array[j], array[j+1]])\r\n                let temp = array[j+1]\r\n                array[j+1] = array[j]\r\n                array[j] = temp\r\n            }\r\n            else \r\n            {\r\n                animations.push([j, array[j]])\r\n            }\r\n        }\r\n    }\r\n    return animations\r\n}\r\n\r\n\r\n\r\nexport function getSelectionSortAnimation(arr) \r\n{\r\n    const animations = [];\r\n    //var n = arr.length;\r\n    console.log(arr);\r\n    const sortArr = arr.slice();\r\n    sortArr.sort((a, b)=> a-b);\r\n    console.log(sortArr);\r\n    for (var i = 0; i < arr.length; i++) \r\n    {\r\n        animations.push([arr[i], sortArr[i]]);\r\n    }\r\n    return animations;\r\n\r\n}\r\nexport function MergesortingAlgorithms(array) \r\n{\r\n\t//create a shallow copy of given array into a new array object\r\n    const animations = []\r\n    if(array.length <= 1) return array\r\n\r\n    const tempArray = array.slice()\r\n    mergeSortHelper(array, 0, array.length - 1, tempArray, animations)\r\n    return animations\r\n}\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, tempArray, animations)\r\n {\r\n\r\n    if(startIdx === endIdx) return\r\n\r\n    const middleIdx = Math.floor((startIdx + endIdx)/2)\r\n    mergeSortHelper(tempArray, startIdx, middleIdx, mainArray, animations)\r\n    mergeSortHelper(tempArray, middleIdx + 1, endIdx, mainArray, animations)\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations)\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations) {\r\n\r\n    let i = startIdx, k = startIdx, j = middleIdx + 1\r\n    \r\n    while(i <= middleIdx && j <= endIdx) {\r\n\r\n        animations.push([i, j])\r\n        animations.push([i, j])\r\n    \r\n        if(tempArray[i] <= tempArray[j]) \r\n        {\r\n            animations.push([k, tempArray[i]]) \r\n            mainArray[k++] = tempArray[i++]\r\n        }\r\n        else \r\n        {\r\n            animations.push([k, tempArray[j]])\r\n            mainArray[k++] = tempArray[j++]\r\n        }\r\n    }\r\n\r\n    while(i <= middleIdx) \r\n    {\r\n        animations.push([i, i])\r\n        animations.push([i, i])\r\n\r\n        animations.push([k, tempArray[i]])\r\n        mainArray[k++] = tempArray[i++]\r\n    }\r\n\r\n    while(j <= endIdx) \r\n    {\r\n        animations.push([j, j])\r\n        animations.push([j, j])\r\n        animations.push([k, tempArray[j]])\r\n        mainArray[k++] = tempArray[j++]\r\n    }\r\n}\r\n\r\nexport function demoSort(array)\r\n{\r\n    const animations = []\r\n    for(let i = 0; i < array.length; i++) \r\n    {\r\n        for(let j = 0; j < array.length - i - 1; j++) \r\n        {\r\n            animations.push([j, j+1])//pushing to change their color\r\n            animations.push([j, j+1])//pushing again to revert color\r\n            if(array[j] > array[j+1]) \r\n            {\r\n                \r\n                animations.push([j, j+1, array[j], array[j+1]])\r\n                let temp = array[j+1]\r\n                array[j+1] = array[j]\r\n                array[j] = temp\r\n            }\r\n            else \r\n            {\r\n                animations.push([j, array[j]])\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport {MergesortingAlgorithms, BubbleSortingAlgorithms, demoSort, getInsertionSortAnimations,getSelectionSortAnimation} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {Button, ButtonGroup} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport './style.css';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n\tbar: {\r\n\t\tbackgroundColor: '#34495e',\r\n\t\theight: '100px',\r\n\t\tmarginTop: '20px'\r\n\t},\r\n\r\n\ttitle: {\r\n\t\tmarginTop:'10px',\r\n\t\tpadding: '20px'\r\n\t},\r\n\r\n\tgrid: {\r\n\t\tmarginTop:'-60px',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent:'space-evenly',\r\n\t}\r\n\r\n})\r\n\r\nfunction SortingVisualizer()\r\n {\r\n\t// body...\r\n\tconst classes = useStyles();\r\n\tconst NUMBER_OF_ARRAY_BARS = randomInteger(5,100);\r\n\tconst [ANIMATION_SPEED_MS, setANIMATION_SPEED_MS] = React.useState(20);\r\n\t//const ANIMATION_SPEED_MS = 18;\r\n\tconst [disabled, setDisabled] = useState(false);\r\n\t  const handleChange = (event, newValue) => \r\n\t  {\r\n\t    setANIMATION_SPEED_MS(newValue);\r\n\t    console.log(ANIMATION_SPEED_MS)\r\n\t  };\r\n\tfunction randomInteger(min, max) \r\n\t{\r\n  \t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r\n\t}\r\n\r\n\t// This is the main color of the array bars.\r\n\tconst PRIMARY_COLOR = 'turquoise';\r\n\r\n\t// This is the color of array bars that are being compared throughout the animations.\r\n\tconst SECONDARY_COLOR = 'black';\r\n\tconst SECONDARY_COLOR_2 = 'blue'\r\n\tconst [arr, setArr] = useState([]);\r\n\tuseEffect(()=>\r\n\t{\r\n\t\tupdateArray();\r\n\t},[]);\r\n\r\n\tconst updateArray = ()=> \r\n\t{\r\n\t\tconst arr = [];\r\n\t    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++)\r\n\t    {\r\n\t      arr.push(Math.floor(Math.random() * (700 - 5 + 1) + 5));\r\n\t    }\r\n\t\tsetArr(arr);\r\n\t}\r\n\r\n\r\n\tconst mergeSort = ()=>\r\n\t{\r\n        const animations = MergesortingAlgorithms(arr)\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n            \r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            const isColorChange = i%3 !== 2\r\n\r\n            if(isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i]\r\n\r\n                const barOneStyle = arrayBars[barOneIdx].style\r\n                const barTwoStyle = arrayBars[barTwoIdx].style\r\n\r\n                const color = i%3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color\r\n                    barTwoStyle.backgroundColor = color    \r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i]\r\n                    const barOneStyle = arrayBars[barOneIdx].style\r\n                    barOneStyle.height = `${newHeight}px`\r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n\r\n\t}\r\n    const insertionSort = ()=> {\r\n    \t//setDisabled(true)\r\n    \tconsole.log(arr)\r\n        const animations = getInsertionSortAnimations(arr)\r\n        console.log(animations)\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            const isColorChange = i % 3 !== 2\r\n          \r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i]\r\n                const barOneStyle = arrayBars[barOneIdx].style\r\n                const barTwoStyle = arrayBars[barTwoIdx].style\r\n                const color1 = i%3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n                const color2 = i%3 === 0 ? SECONDARY_COLOR_2 : 'turquoise'\r\n          \r\n                setTimeout(() => \r\n                {\r\n                    barOneStyle.backgroundColor = color1\r\n                    barTwoStyle.backgroundColor = color2\r\n                }, i * ANIMATION_SPEED_MS)\r\n            } \r\n            else \r\n            {\r\n            \r\n                setTimeout(() => \r\n                {\r\n                    \r\n                    const [barOneIdx, newHeight] = animations[i]\r\n                    const barOneStyle = arrayBars[barOneIdx].style\r\n                    barOneStyle.height = `${newHeight}px`\r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n        //setDisabled(false)\r\n    }\r\n\r\n\t\r\n\r\n\tconst selectionSort = ()=>\r\n\t{\r\n\t\t//console.log(arr)\r\n\t}\r\n\r\n\tconst demo = ()=> \r\n\t{\r\n\t\tconst array = demoSort(arr);\r\n\t\tconsole.log(array);\r\n\t\t//let idx = arr.length-1;\r\n\t\tfor(let i=0;i<array.length;i++)\r\n\t\t{\r\n\t\t\t//arrayBars dom object \r\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\tconst flag = i%3 !== 2\r\n\t\t\tif(flag)\r\n\t\t\t{\r\n\t\t\t\tconst [baridx1, baridx2] = array[i];\r\n\t\t\t\tconst baridx1Style = arrayBars[baridx1].style;\r\n\t\t\t\tconst baridx2Style = arrayBars[baridx2].style;\r\n                const color1 = i%3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n                const color2 = i%3 === 0 ? SECONDARY_COLOR_2 : 'turquoise'\r\n\t\t\t\tsetTimeout(()=> \r\n\t\t\t\t{\r\n                    baridx1Style.backgroundColor = color1\r\n                    baridx2Style.backgroundColor = color2 \r\n\r\n\t\t\t\t}, i*ANIMATION_SPEED_MS)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(array[i].length===4)\r\n\t\t\t\t{\r\n\t\t\t\t\tsetTimeout(()=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst [barOneIdx, barTwoIdx, newHeight1, newHeight2] = array[i]\r\n\t\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style\r\n\t\t\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style\r\n\t\t\t\t\t\tbarOneStyle.height = `${newHeight2}px`\r\n\t\t\t\t\t\tbarTwoStyle.height = `${newHeight1}px`\r\n\t\t\t\t\t}, i*ANIMATION_SPEED_MS)\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst BubbleSort = ()=>\r\n\t{\r\n        const animations = BubbleSortingAlgorithms(arr)\r\n        for(let i = 0; i < animations.length; i++) \r\n        {\r\n            //array of each bar\r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            if(animations[i] === null) continue\r\n\r\n            //change color at each index i with remainder 2\r\n            const isColorChange = i%3 !== 2\r\n            if(isColorChange) \r\n            {\r\n            \t//destructuring index1 and index2\r\n                const [barOneIdx, barTwoIdx] = animations[i]\r\n                const barOneStyle = arrayBars[barOneIdx].style\r\n                const barTwoStyle = arrayBars[barTwoIdx].style\r\n                //color bars for comparision\r\n                const color1 = i%3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n                const color2 = i%3 === 0 ? SECONDARY_COLOR_2 : 'turquoise'\r\n                setTimeout(() => \r\n                {\r\n                    barOneStyle.backgroundColor = color1\r\n                    barTwoStyle.backgroundColor = color2    \r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n            else \r\n            {\r\n\t\t    \r\n                if(animations[i].length === 4) \r\n                {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\r\n\t\t\t\t\t\tconst [barOneIdx, barTwoIdx, newHeight1, newHeight2] = animations[i]\r\n\t\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style\r\n\t\t\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style\r\n\t\t\t\t\t\tbarOneStyle.height = `${newHeight2}px`\r\n\t\t\t\t\t\tbarTwoStyle.height = `${newHeight1}px`\r\n\t\t\t\t\t\t\r\n\t\t\t\t}, i * ANIMATION_SPEED_MS)\r\n              }\r\n           }\r\n        }\r\n       // finalColoredArray(arr);\r\n\r\n\r\n\t\t/*\r\n\t\tfor (var i = 0; i < resultArray.length; i++)\r\n\t\t{\r\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\r\n\t\t\tconst barStyle = arrayBars[i].style;\r\n\t\t\tbarStyle[\"height\"] = `${resultArray[i]}px`;\r\n\t\t\tbarStyle[\"background-color\"] = SECONDARY_COLOR;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\treturn(\r\n\t  <div>\r\n\t      <AppBar \r\n\t        style=\r\n\t        {{\r\n\t          pointerEvents: disabled ? \"none\" : \"initial\"\r\n           \t}}\r\n\t       className={classes.bar} position=\"static\">\r\n\t      \t<Typography className={classes.title}variant=\"h5\">Sorting Visualizer </Typography>\r\n\t        <Toolbar className={classes.grid}>\r\n\t        \t<Button onClick={()=>updateArray()} size=\"large\" variant=\"contained\">Generate new Array</Button>\r\n\t\t\t\t<ButtonGroup  size=\"large\" aria-label=\"small outlined button group\">\r\n\t\t\t\t  <Button onClick={()=>BubbleSort()} color=\"secondary\" variant=\"text\">Bubble Sort</Button>\r\n\t\t\t\t  <Button onClick={()=>selectionSort()} color=\"secondary\" variant=\"text\">selection Sort</Button>\r\n\t\t\t\t  <Button onClick={()=>insertionSort()} color=\"secondary\" variant=\"text\">Insertion Sort</Button>\r\n\t\t\t\t  <Button onClick={()=>mergeSort()} color=\"secondary\" variant=\"text\">Merge sort</Button>\r\n\t\t\t      <Typography style={{margin:'20px'}} id=\"continuous-slider\" gutterBottom>\r\n\t\t\t        ANIMATION_SPEED\r\n\t\t\t      </Typography>\t\r\n\t\t\t\t  <Slider color=\"secondary\" style={{margin:'20px',width:'150px'}}value={ANIMATION_SPEED_MS} onChange={handleChange} aria-labelledby=\"continuous-slider\" />\t\r\n\t\t\t\t</ButtonGroup>\r\n\t        </Toolbar>\r\n\t      </AppBar>\r\n\t\t<div className=\"array-container\">\r\n\t        {arr.map((value, idx) => (\r\n\t          <div\r\n\t            className=\"array-bar\"\r\n\t            key={idx}\r\n\t            style={\r\n\t            \t{\r\n\t\t              backgroundColor: PRIMARY_COLOR,\r\n\t\t              height: `${value}px`,\r\n\t\t              width: `${1000/arr.length}px`\r\n\t           \t\t}\r\n\t        \t}>\r\n\t           </div>\r\n\t        ))}\r\n\t\t</div>\r\n\t  </div>\r\n\t)\r\n}\r\nexport default SortingVisualizer;","import './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router, Switch,Route,Link } from \"react-router-dom\";\nimport Home from './components/Home';\nimport SortingVisualizer from './components/sorting/SortingVisualizer';\n//import TOI from './components/sortingAlgorithms/TOI';\n//import {floodfill} from './components/algo/floodfill';\n\n//import {motion} from 'framer-motion';\n\nfunction App() {\n  return (\n      <div>\n      <Router>\n        <div className=\"topnav\">\n            <ul className=\"ul\">\n              <li>\n                <Link style={{color: 'orange', fontSize:'30px'}} to=\"/Home\">Home</Link>\n              </li>\n              <li>\n                <Link style={{color: 'orange', fontSize:'30px'}} to=\"/SortingVisualizer\">SortingVisualizer</Link>\n              </li>\n              <li>\n                <Link style={{color: 'orange', fontSize:'30px'}} to=\"/TOI\">TOI</Link>\n              </li>\n            </ul>\n          <Switch>\n            <Route path=\"/Home\">\n              <Home />\n            </Route>\n\n            <Route path=\"/SortingVisualizer\">\n              <SortingVisualizer />\n            </Route>\n\n\n          </Switch>\n        </div>\n      </Router>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}